/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface SimpleFlashLoanInterface extends utils.Interface {
  functions: {
    "ADDRESSES_PROVIDER()": FunctionFragment;
    "POOL()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "executeSimpleFlashLoan(address[],address[],address[],uint256)": FunctionFragment;
    "executeTriangularFlashLoan(address[],address[],address[],address[],uint256)": FunctionFragment;
    "executeOperation(address,uint256,uint256,address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADDRESSES_PROVIDER"
      | "POOL"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "executeSimpleFlashLoan"
      | "executeTriangularFlashLoan"
      | "executeOperation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADDRESSES_PROVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "POOL", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSimpleFlashLoan",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTriangularFlashLoan",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeOperation",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "ADDRESSES_PROVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "POOL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSimpleFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTriangularFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeOperation",
    data: BytesLike
  ): Result;

  events: {
    "Log(address[],string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface LogEventObject {
  data: string[];
  desc: string;
}
export type LogEvent = TypedEvent<[string[], string], LogEventObject>;

export type LogEventFilter = TypedEventFilter<LogEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SimpleFlashLoan extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SimpleFlashLoanInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<[string]>;

    POOL(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * This function encodes the parameters, passes them to the flash loan smart contract, and triggers the flash loan
     * Executes simple flash  loan
     * @param amount The amount of the flash loan
     * @param buyingPath The swap path of the buying DEX
     * @param dexAddresses The addresses of the buying and selling DEXes
     * @param sellingPath The swap path of the selling DEX
     */
    executeSimpleFlashLoan(
      dexAddresses: PromiseOrValue<string>[],
      buyingPath: PromiseOrValue<string>[],
      sellingPath: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * This function encodes the parameters, passes them to the flash loan smart contract, and triggers the flash loan
     * Executes simple flash  loan
     * @param amount The amount of the flash loan
     * @param buyingPath The swap path of the buying DEX
     * @param dexAddresses The addresses of the buying , selling and intermediate  DEXes
     * @param intermediatePath The swap path of the intermediate  DEX
     * @param sellingPath The swap path of the selling DEX
     */
    executeTriangularFlashLoan(
      dexAddresses: PromiseOrValue<string>[],
      buyingPath: PromiseOrValue<string>[],
      intermediatePath: PromiseOrValue<string>[],
      sellingPath: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * This function is called by AAVE to execute the flash loan
     * Executes the operation
     * @param amount The amount of the borrowed asset
     * @param asset The address of the borrowed token
     * @param encodeParams The encoded data used to execute the flash loan
     * @param initiator The address of the flash loan initiator
     * @param premium The fee we should pay for the flash loan
     */
    executeOperation(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      premium: PromiseOrValue<BigNumberish>,
      initiator: PromiseOrValue<string>,
      encodeParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<string>;

  POOL(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * This function encodes the parameters, passes them to the flash loan smart contract, and triggers the flash loan
   * Executes simple flash  loan
   * @param amount The amount of the flash loan
   * @param buyingPath The swap path of the buying DEX
   * @param dexAddresses The addresses of the buying and selling DEXes
   * @param sellingPath The swap path of the selling DEX
   */
  executeSimpleFlashLoan(
    dexAddresses: PromiseOrValue<string>[],
    buyingPath: PromiseOrValue<string>[],
    sellingPath: PromiseOrValue<string>[],
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * This function encodes the parameters, passes them to the flash loan smart contract, and triggers the flash loan
   * Executes simple flash  loan
   * @param amount The amount of the flash loan
   * @param buyingPath The swap path of the buying DEX
   * @param dexAddresses The addresses of the buying , selling and intermediate  DEXes
   * @param intermediatePath The swap path of the intermediate  DEX
   * @param sellingPath The swap path of the selling DEX
   */
  executeTriangularFlashLoan(
    dexAddresses: PromiseOrValue<string>[],
    buyingPath: PromiseOrValue<string>[],
    intermediatePath: PromiseOrValue<string>[],
    sellingPath: PromiseOrValue<string>[],
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * This function is called by AAVE to execute the flash loan
   * Executes the operation
   * @param amount The amount of the borrowed asset
   * @param asset The address of the borrowed token
   * @param encodeParams The encoded data used to execute the flash loan
   * @param initiator The address of the flash loan initiator
   * @param premium The fee we should pay for the flash loan
   */
  executeOperation(
    asset: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    premium: PromiseOrValue<BigNumberish>,
    initiator: PromiseOrValue<string>,
    encodeParams: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<string>;

    POOL(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function encodes the parameters, passes them to the flash loan smart contract, and triggers the flash loan
     * Executes simple flash  loan
     * @param amount The amount of the flash loan
     * @param buyingPath The swap path of the buying DEX
     * @param dexAddresses The addresses of the buying and selling DEXes
     * @param sellingPath The swap path of the selling DEX
     */
    executeSimpleFlashLoan(
      dexAddresses: PromiseOrValue<string>[],
      buyingPath: PromiseOrValue<string>[],
      sellingPath: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function encodes the parameters, passes them to the flash loan smart contract, and triggers the flash loan
     * Executes simple flash  loan
     * @param amount The amount of the flash loan
     * @param buyingPath The swap path of the buying DEX
     * @param dexAddresses The addresses of the buying , selling and intermediate  DEXes
     * @param intermediatePath The swap path of the intermediate  DEX
     * @param sellingPath The swap path of the selling DEX
     */
    executeTriangularFlashLoan(
      dexAddresses: PromiseOrValue<string>[],
      buyingPath: PromiseOrValue<string>[],
      intermediatePath: PromiseOrValue<string>[],
      sellingPath: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function is called by AAVE to execute the flash loan
     * Executes the operation
     * @param amount The amount of the borrowed asset
     * @param asset The address of the borrowed token
     * @param encodeParams The encoded data used to execute the flash loan
     * @param initiator The address of the flash loan initiator
     * @param premium The fee we should pay for the flash loan
     */
    executeOperation(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      premium: PromiseOrValue<BigNumberish>,
      initiator: PromiseOrValue<string>,
      encodeParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Log(address[],string)"(data?: null, desc?: null): LogEventFilter;
    Log(data?: null, desc?: null): LogEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    POOL(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * This function encodes the parameters, passes them to the flash loan smart contract, and triggers the flash loan
     * Executes simple flash  loan
     * @param amount The amount of the flash loan
     * @param buyingPath The swap path of the buying DEX
     * @param dexAddresses The addresses of the buying and selling DEXes
     * @param sellingPath The swap path of the selling DEX
     */
    executeSimpleFlashLoan(
      dexAddresses: PromiseOrValue<string>[],
      buyingPath: PromiseOrValue<string>[],
      sellingPath: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * This function encodes the parameters, passes them to the flash loan smart contract, and triggers the flash loan
     * Executes simple flash  loan
     * @param amount The amount of the flash loan
     * @param buyingPath The swap path of the buying DEX
     * @param dexAddresses The addresses of the buying , selling and intermediate  DEXes
     * @param intermediatePath The swap path of the intermediate  DEX
     * @param sellingPath The swap path of the selling DEX
     */
    executeTriangularFlashLoan(
      dexAddresses: PromiseOrValue<string>[],
      buyingPath: PromiseOrValue<string>[],
      intermediatePath: PromiseOrValue<string>[],
      sellingPath: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * This function is called by AAVE to execute the flash loan
     * Executes the operation
     * @param amount The amount of the borrowed asset
     * @param asset The address of the borrowed token
     * @param encodeParams The encoded data used to execute the flash loan
     * @param initiator The address of the flash loan initiator
     * @param premium The fee we should pay for the flash loan
     */
    executeOperation(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      premium: PromiseOrValue<BigNumberish>,
      initiator: PromiseOrValue<string>,
      encodeParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADDRESSES_PROVIDER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This function encodes the parameters, passes them to the flash loan smart contract, and triggers the flash loan
     * Executes simple flash  loan
     * @param amount The amount of the flash loan
     * @param buyingPath The swap path of the buying DEX
     * @param dexAddresses The addresses of the buying and selling DEXes
     * @param sellingPath The swap path of the selling DEX
     */
    executeSimpleFlashLoan(
      dexAddresses: PromiseOrValue<string>[],
      buyingPath: PromiseOrValue<string>[],
      sellingPath: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This function encodes the parameters, passes them to the flash loan smart contract, and triggers the flash loan
     * Executes simple flash  loan
     * @param amount The amount of the flash loan
     * @param buyingPath The swap path of the buying DEX
     * @param dexAddresses The addresses of the buying , selling and intermediate  DEXes
     * @param intermediatePath The swap path of the intermediate  DEX
     * @param sellingPath The swap path of the selling DEX
     */
    executeTriangularFlashLoan(
      dexAddresses: PromiseOrValue<string>[],
      buyingPath: PromiseOrValue<string>[],
      intermediatePath: PromiseOrValue<string>[],
      sellingPath: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This function is called by AAVE to execute the flash loan
     * Executes the operation
     * @param amount The amount of the borrowed asset
     * @param asset The address of the borrowed token
     * @param encodeParams The encoded data used to execute the flash loan
     * @param initiator The address of the flash loan initiator
     * @param premium The fee we should pay for the flash loan
     */
    executeOperation(
      asset: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      premium: PromiseOrValue<BigNumberish>,
      initiator: PromiseOrValue<string>,
      encodeParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
